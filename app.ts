declare var window: Window;var doc = window.document;// =====================================================================================================================// ======================================== Models =====================================================================// =====================================================================================================================class Picture {    name: string;    url: string;    constructor(name: string, url: string) {        this.name = name;        this.url = url;    }}class PictureCountable extends Picture {    private _counter: number;    get counter(): number {        return this._counter    }    set counter(value: number) {        console.log('value = ', value);        this._counter = value;    }    constructor(name: string, url: string, counter?: number) {        super(name, url);        this.counter = counter || 0;    }}interface PictureCountableData {    name: string;    url: string;    counter?: number;}class PictureCountableCollection {    private _itemsStorage: Array<PictureCountable>;    constructor(items?: Array<PictureCountableData>) {        this._itemsStorage = [];        if (Array.isArray(items)) {            items.forEach((item) => {                var { name, url, counter = 0 } = item;                this._itemsStorage.push(new PictureCountable(name, url, counter))            });        }    }    list() {        return this._itemsStorage;    }    getItem(index: number): PictureCountableData {        return this._itemsStorage[index];    }}// =====================================================================================================================// ======================================== Views ======================================================================// =====================================================================================================================interface EventDeclaration {    event: string;    selector: string;    callback(): void;}class View {    public name: string = 'view';    public tag: string = 'div';    public events: Array<EventDeclaration>;    public data: any;    /**     * Link to elem that is built with this._rebuildCurrentElem()     * May be not attached to DOM     */    private _currentElem;    /**     * Link to elem that is attached to DOM     */    private _publishedElem;    private _container;    private _childViews: Array<View>;    public get childViews() {        return this._childViews;    }    constructor(container, data) {        this.events = this.events || [];        this.data = data || {};        this._currentElem = null;        this._publishedElem = null;        this._childViews = [];        this._container = container;    }    destroy() {        this._destroyChildViews();        this.detachEventsFrom(this._currentElem);    }    /**     * Renders views elem and attaches/updates it to DOM     * @param data     */    render() {        this._rebuildCurrentElem(this.data);        // Rendering this view for the first time        if (this._publishedElem === null) {            this._container.appendChild(this._currentElem);        // Update existing DOM HTMLElement of this view        } else if (this._publishedElem instanceof HTMLElement) {            this._container.replaceChild(this._currentElem, this._publishedElem);        }        this._updatePublishedElem();    }    /**     * Returns elem     * Should be implemented at descendant classes     * @param data     */    buildElem(data: any): HTMLElement {        this._currentElem = doc.createElement(this.tag);        this._currentElem.classList.add(this.name);        return this._currentElem;    }    /**     * Wrapper for child views creation     * @param viewInstance     * @returns {any}     */    createSubView(viewInstance): View {        this._childViews.push(viewInstance);        return viewInstance;    }    getChildView(index: number): View{        return this._childViews[index];    }    /**     * Attaches events to elem     * @param node     */    attachEventsTo(node: HTMLElement) {        this.events.forEach((eventDecl) => {            var targetNode = eventDecl.selector ? node.querySelector(eventDecl.selector) : node;            targetNode.addEventListener(eventDecl.event, eventDecl.callback);        });    }    /**     * Dettaches events from elem     * @param node     * @private     */    detachEventsFrom(node: HTMLElement) {        this.events.forEach((eventDecl) => {            var targetNode = eventDecl.selector ? node.querySelector(eventDecl.selector) : node;            targetNode.removeEventListener(eventDecl.event, eventDecl.callback);        });    }    /**     * Completely rebuilds views elem (including child views) and puts it to this._currentElem     * @param data     * @private     */    private _rebuildCurrentElem(data: any) {        this._destroyChildViews();        // Detach events from currentNode        if (this._currentElem instanceof HTMLElement) {            this.detachEventsFrom(this._currentElem);        }        this._currentElem = this.buildElem(data);    }    /**     * Keep this._publishedElem property up to date for current view and child views     * @private     */    private _updatePublishedElem() {        this._publishedElem = this._currentElem;        this._childViews.forEach((childView) => {            childView._updatePublishedElem();        });    }    /**     * Destroys child views     * @private     */    private _destroyChildViews() {        while (this._childViews.length > 0) {            this._childViews.shift().destroy();        }    }}interface IView {    name: string;}class ViewBrowser extends View implements IView {    name: 'view-browser';    buildElem(items: any) {        var rootElement = super.buildElem(items),            listElement = doc.createElement('div'),            previewElement = doc.createElement('div');        if (Array.isArray(items)) {            items.forEach((itemData) => {                var view = this.createSubView(new ViewPicturePreview(listElement, itemData)),                    viewElem = view.buildElem(itemData);                listElement.appendChild(viewElem);            });        }        rootElement.appendChild(listElement);        rootElement.appendChild(previewElement);        this.attachEventsTo(rootElement);        return rootElement;    }}class ViewPicturePreview extends View implements IView {    name: 'view-picture-preview';    events = [        {            event: 'click',            selector: '',            callback: () => {                this.data.counter++;                this.render();            }        }    ];    buildElem(data: any) {        var rootElement = super.buildElem(data),            nameElement = doc.createElement('span'),            urlElement = doc.createElement('img'),            counterElement = doc.createElement('span');        nameElement.textContent = data.name;        urlElement.src = data.url;        counterElement.textContent = data.counter;        rootElement.appendChild(nameElement);        rootElement.appendChild(urlElement);        rootElement.appendChild(counterElement);        this.attachEventsTo(rootElement);        return rootElement;    }}// =====================================================================================================================// ======================================== Controllers ================================================================// =====================================================================================================================class Controller {    viewBrowser: ViewBrowser;    constructor(appContainer, collection: PictureCountableCollection) {        this.viewBrowser = new ViewBrowser(appContainer, collection.list());        this.viewBrowser.render();    }}// =====================================================================================================================// ======================================== App ========================================================================// =====================================================================================================================class App {    private cats: Array<string> = [        'cory', 'erik', 'gene', 'jean', 'jeff', 'josh', 'nick', 'wade', 'chris', 'clark', 'damon', 'darin', 'garry',        'jesse', 'jesus', 'keith', 'lamar', 'ricky', 'ruben', 'rufus', 'sammy', 'tyler', 'bryant', 'conrad', 'darren',        'elbert', 'eugene', 'javier', 'jerome', 'julian', 'kelvin', 'marlon', 'nathan', 'santos', 'travis', 'wesley',        'darrell', 'frankie', 'jonathan', 'michael', 'shannon', 'winston', 'roderick', 'frederick'    ];    private _buildCatData(): Array<PictureCountableData> {        return this.cats.map(itemName => {            return {                name: itemName,                url: 'assets/cats/' + itemName + '.jpg'            }        });    }    constructor() {        var appContainer = doc.querySelector('#app'),            catsCollection = new PictureCountableCollection(this._buildCatData()),            controller = new Controller(appContainer, catsCollection);        return controller;    }}/** * App init */window.onload = function() {    var app = new App();    console.log('app', app)};